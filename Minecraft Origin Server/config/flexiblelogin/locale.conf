# Visit: https://github.com/games647/FlexibleLogin/wiki for community given templates

# When an account already exists, and therefore cannot be created.
accountAlreadyExists {
    color="dark_red"
    text="此用户名太受欢迎, 请更换一个 !"
}
# When the player successfully created his/her account.
accountCreated {
    color="dark_green"
    text="注册成功 !"
}
# When an account was successfully deleted
accountDelete {
    arguments {
        account {
            optional=true
        }
    }
    closeArg="}"
    content {
        color=yellow
        extra=[
            {
                text="删除账户: "
            },
            {
                text="{account}"
            },
            {
                text="!"
            }
        ]
        text=""
    }
    openArg="{"
    options {
        closeArg="}"
        openArg="{"
    }
}
# When a player's account does not exist.
accountNotFound {
    color="dark_red"
    text="用户不存在 !"
}
# When the account does not exist on the account database.
accountNotLoaded {
    color="dark_green"
    text="您的账户加载异常 !"
}
# Result message for the accounts admin command
accountsList {
    arguments {
        accounts {
            optional=false
        }
        username {
            optional=true
        }
    }
    closeArg="}"
    content {
        color="dark_green"
        extra=[
            {
                text="{username}"
            },
            {
                text=" 的账号: "
            },
            {
                text="{accounts}"
            }
        ]
        text=""
    }
    openArg="{"
    options {
        closeArg="}"
        openArg="{"
    }
}
# When an accounts list is empty
accountsListEmpty {
    color="dark_red"
    text=没有账号
}
# When an account hasn't IP in database
accountsListNoIP {
    color="dark_red"
    text=这个账号之前没有游玩过
}
# If the player is logged in, it is then pointless to use the forgot password command
alreadyLoggedIn {
    color="dark_red"
    text="您已经登录了 !"
}
# Another player with the same name tried to join the server while that player is still online
alreadyOnline {
    color="dark_green"
    text="您已经在线了 !"
}
# Message if the player changed his account password successfully
changePassword {
    color="dark_green"
    text="密码修改成功 !"
}
# If email recovery is not enabled
emailNotEnabled {
    color="dark_green"
    text=未启用电子邮件恢复功能
}
# When the player successfully used the set email command and set his/her email.
emailSet {
    color="dark_green"
    text=您成功设置了电子邮件
}
# When an unexpected error occurs. (Should not happen)
errorExecutingCommand {
    color="dark_red"
    text="执行指令的过程中发生了异常, 请检查控制台"
}
# Force login failed because the player is logged in
forceLoginAlreadyLoggedIn {
    color="dark_green"
    text="无法强制登录玩家, 该玩家已经登录了"
}
# Force login failed because the player is offline
forceLoginOffline {
    color="dark_green"
    text="无法强制登录玩家, 该玩家离线"
}
# Successful force logged an account
forceLoginSuccess {
    color="dark_green"
    text=强制登录成功
}
# Force register failed because the player is online
forceRegisterOnline {
    color="dark_green"
    text="无法完成强制注册, 此玩家当前在线"
}
# Successful force registered an account
forceRegisterSuccess {
    color="dark_green"
    text=强制注册成功
}
# When a player enters an incorrect password.
incorrectPassword {
    color="dark_red"
    text="密码错误 !"
}
# Kick message if the case sensitive compare between the already registered and the joining player failed
invalidCase {
    arguments {
        username {
            optional=true
        }
    }
    closeArg="}"
    content {
        color=yellow
        extra=[
            {
                text="错误的玩家 ID, 请以 ID: "
            },
            {
                text="{username}"
            },
            {
                text=" 加入游戏 !"
            }
        ]
        text=""
    }
    openArg="{"
    options {
        closeArg="}"
        openArg="{"
    }
}
# When a player joined with a non Mojang valid username
invalidUsername {
    color="dark_red"
    text="无效的用户名 - 字符的范围是 a-z, A-Z, 0-9 并且长度在 2 到 16 之间 !"
}
# When the player is auto logged in by using the same ip as the last login
ipAutoLogin {
    color="dark_green"
    text=已为您自动登录
}
# When a secret-key is created (header).
keyGenerated {
    arguments {
        code {
            optional=false
        }
    }
    closeArg="}"
    content {
        color=yellow
        extra=[
            {
                text="秘钥生成成功: "
            },
            {
                text="{code}"
            }
        ]
        hoverEvent {
            action="show_text"
            value {
                color="dark_green"
                text="Representation: Base32 \nHashFunction: HmacSHA512 \nDigits: 6 \nWindow size: 3 \nTime frame: 1000000ms"
            }
        }
        text=""
    }
    openArg="{"
    options {
        closeArg="}"
        openArg="{"
    }
}
# Result message for the last login admin command
lastOnline {
    arguments {
        time {
            optional=false
        }
        username {
            optional=true
        }
    }
    closeArg="}"
    content {
        color=yellow
        extra=[
            {
                text="账号: "
            },
            {
                text="{username}"
            },
            {
                text=" 最后一次在线是 "
            },
            {
                text="{time}"
            }
        ]
        text=""
    }
    openArg="{"
    options {
        closeArg="}"
        openArg="{"
    }
}
# When a player successfully logs in.
loggedIn {
    color="dark_green"
    text="登录成功 !"
}
# Whe the player successfully logs out of his/her account.
loggedOut {
    color="dark_green"
    text="登出成功 !"
}
# When the recovery email was sent!
mailSent {
    color="dark_green"
    text=邮件已发送
}
# User reached max attempts
maxAttempts {
    color="dark_red"
    text="您输入了太多次的错误密码! 请联系管理员 !"
}
# User reached the max ip registrations
maxIpReg {
    color="dark_red"
    text="您所使用的 IP 地址注册太多的账号了, 请联系管理员 !"
}
# When the player enters an email that does not exist.
notEmail {
    color="dark_red"
    text="您输入了一个错误的 Email 邮件地址 !"
}
# When the player is not logged in of his/her account.
notLoggedIn {
    clickEvent {
        action="suggest_command"
        value="/login "
    }
    color="dark_red"
    text="未登陆, 请输入 /login [密码] 登陆游戏 !"
}
# When the player not registered an account.
notRegistered {
    clickEvent {
        action="suggest_command"
        value="/register "
    }
    color="dark_red"
    text="未注册, 请输入/register [密码] [确认密码] 完成注册 !"
}
# Admin reloaded the plugin
onReload {
    color="dark_green"
    text=插件重载成功
}
# When a non-player (i.e. Console, Command Block) tries to do a player only action.
playersOnly {
    color="dark_red"
    text=只有玩家可以执行此指令
}
# When the user tries to execute a protected command if command only protection is enabled
protectedCommand {
    color="dark_red"
    text="此指令收到保护, 请登录"
}
# When a player registered using TOTP and the code can be scanned by clicking on it
scanQr {
    color=yellow
    text=点击这里扫描二维码
}
# Account storage was deleted by admin command
tableCleared {
    color="dark_green"
    text=数据库已清除
}
# Kick message if the player doesn't logged during the configured time out seconds
timeoutReason {
    color="dark_red"
    text=登录超时
}
# Message if the player has to register with a longer password
tooShortPassword {
    color="dark_green"
    text=您的密码太短了
}
# When totp is not enabled.
totpNotEnabled {
    color="dark_red"
    text="Totp 当前不可用, 您必须输入两个密码"
}
# When the player did not or forgot to submit an email address used to recover a password.
uncommittedEmailAddress {
    color="dark_red"
    text="您没有输入任何 Email 地址"
}
# When the two passwords typed do not match each other.
unequalPasswords {
    color="dark_red"
    text="两次密码输入的不一样 !"
}
# If unregistered player shouldn't join the server
unregisteredKick {
    color="dark_green"
    text="您无法连接服务器, 请到网页注册"
}
